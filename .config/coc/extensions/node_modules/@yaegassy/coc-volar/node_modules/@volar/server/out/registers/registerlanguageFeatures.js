"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const vue = require("vscode-vue-languageservice");
const vscode = require("vscode-languageserver");
const shared_1 = require("../features/shared");
function register(connection, features, legend) {
    if (features.references) {
        const enabledInTsScript = typeof features.references === 'object' ? features.references.enabledInTsScript : false;
        connection.client.register(vscode.ReferencesRequest.type, enabledInTsScript ? shared_1.allFilesReg : shared_1.vueFileReg);
    }
    if (features.definition) {
        const enabledInTsScript = typeof features.definition === 'object' ? features.definition.enabledInTsScript : false;
        connection.client.register(vscode.DefinitionRequest.type, enabledInTsScript ? shared_1.allFilesReg : shared_1.vueFileReg);
    }
    if (features.typeDefinition) {
        const enabledInTsScript = typeof features.typeDefinition === 'object' ? features.typeDefinition.enabledInTsScript : false;
        connection.client.register(vscode.TypeDefinitionRequest.type, enabledInTsScript ? shared_1.allFilesReg : shared_1.vueFileReg);
    }
    if (features.callHierarchy) {
        const enabledInTsScript = typeof features.callHierarchy === 'object' ? features.callHierarchy.enabledInTsScript : false;
        connection.client.register(vscode.CallHierarchyPrepareRequest.type, enabledInTsScript ? shared_1.allFilesReg : shared_1.vueFileReg);
    }
    if (features.hover) {
        connection.client.register(vscode.HoverRequest.type, shared_1.vueFileReg);
    }
    if (features.rename) {
        connection.client.register(vscode.RenameRequest.type, {
            documentSelector: shared_1.vueFileReg.documentSelector,
            prepareProvider: true,
        });
    }
    if (features.signatureHelp) {
        connection.client.register(vscode.SignatureHelpRequest.type, {
            documentSelector: shared_1.vueFileReg.documentSelector,
            triggerCharacters: ['(', ',', '<'],
            retriggerCharacters: [')'],
        });
    }
    if (features.completion) {
        connection.client.register(vscode.CompletionRequest.type, {
            documentSelector: shared_1.vueFileReg.documentSelector,
            triggerCharacters: [
                ...vue.triggerCharacter.typescript,
                ...vue.triggerCharacter.html,
                ...vue.triggerCharacter.css,
                ...vue.triggerCharacter.json,
            ],
            resolveProvider: true,
        });
        connection.client.register(vscode.ExecuteCommandRequest.type, {
            commands: [
                vue.Commands.CONVERT_TO_KEBAB_CASE,
                vue.Commands.CONVERT_TO_PASCAL_CASE,
            ]
        });
    }
    if (features.documentHighlight) {
        connection.client.register(vscode.DocumentHighlightRequest.type, shared_1.vueFileReg);
    }
    if (features.documentLink) {
        connection.client.register(vscode.DocumentLinkRequest.type, shared_1.vueFileReg);
    }
    if (features.codeLens) {
        connection.client.register(vscode.CodeLensRequest.type, {
            documentSelector: shared_1.allFilesReg.documentSelector,
            resolveProvider: true,
        });
        connection.client.register(vscode.ExecuteCommandRequest.type, {
            commands: [
                vue.Commands.HTML_TO_PUG,
                vue.Commands.PUG_TO_HTML,
                vue.Commands.USE_SETUP_SUGAR,
                vue.Commands.UNUSE_SETUP_SUGAR,
                vue.Commands.USE_REF_SUGAR,
                vue.Commands.UNUSE_REF_SUGAR,
                vue.Commands.SHOW_REFERENCES,
            ]
        });
    }
    if (features.semanticTokens) {
        connection.client.register(vscode.SemanticTokensRegistrationType.type, {
            documentSelector: shared_1.vueFileReg.documentSelector,
            range: true,
            full: false,
            legend,
        });
    }
    if (features.codeAction) {
        connection.client.register(vscode.CodeActionRequest.type, {
            documentSelector: shared_1.vueFileReg.documentSelector,
            codeActionKinds: [
                vscode.CodeActionKind.Empty,
                vscode.CodeActionKind.QuickFix,
                vscode.CodeActionKind.Refactor,
                vscode.CodeActionKind.RefactorExtract,
                vscode.CodeActionKind.RefactorInline,
                vscode.CodeActionKind.RefactorRewrite,
                vscode.CodeActionKind.Source,
                vscode.CodeActionKind.SourceFixAll,
                vscode.CodeActionKind.SourceOrganizeImports,
            ],
            resolveProvider: true,
        });
    }
}
exports.register = register;
//# sourceMappingURL=registerlanguageFeatures.js.map