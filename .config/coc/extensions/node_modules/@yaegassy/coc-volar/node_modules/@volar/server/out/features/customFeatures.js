"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const shared = require("@volar/shared");
const fs = require("fs");
const path = require("upath");
const vscode = require("vscode-languageserver");
function register(connection, documents, projects) {
    connection.onRequest(shared.GetRefCompleteEditsRequest.type, handler => {
        var _a;
        const document = documents.get(handler.textDocument.uri);
        if (!document)
            return;
        return (_a = projects.get(document.uri)) === null || _a === void 0 ? void 0 : _a.service.__internal__.doRefAutoClose(document, handler.position);
    });
    connection.onRequest(shared.D3Request.type, async (handler) => {
        var _a;
        const document = documents.get(handler.uri);
        if (!document)
            return;
        return await ((_a = projects.get(document.uri)) === null || _a === void 0 ? void 0 : _a.service.__internal__.getD3(document));
    });
    connection.onNotification(shared.WriteVirtualFilesNotification.type, async ({ lsType }) => {
        for (const [_, service] of projects.projects.size ? projects.projects : projects.inferredProjects) {
            const ls = service.getLanguageServiceDontCreate();
            if (!ls)
                continue;
            const globalDocs = ls.__internal__.getGlobalDocs();
            for (const globalDoc of globalDocs) {
                fs.writeFile(shared.uriToFsPath(globalDoc.uri), globalDoc.getText(), () => { });
            }
            const { sourceFiles } = await ls.__internal__.getContext();
            for (const [_, doc] of sourceFiles.getTsDocuments(lsType)) {
                fs.writeFile(shared.uriToFsPath(doc.uri), doc.getText(), () => { });
            }
        }
    });
    connection.onNotification(shared.VerifyAllScriptsNotification.type, async () => {
        let errors = 0;
        let warnings = 0;
        const progress = await connection.window.createWorkDoneProgress();
        progress.begin('Verify', 0, '', true);
        for (const [_, service] of projects.projects.size ? projects.projects : projects.inferredProjects) {
            const ls = service.getLanguageServiceDontCreate();
            if (!ls)
                continue;
            const { sourceFiles } = await ls.__internal__.getContext();
            const allFiles = sourceFiles.getAll();
            let i = 0;
            for (const sourceFile of allFiles) {
                progress.report(i++ / allFiles.length * 100, path.relative(ls.__internal__.rootPath, shared.uriToFsPath(sourceFile.uri)));
                if (progress.token.isCancellationRequested) {
                    continue;
                }
                let _result = [];
                await ls.doValidation(sourceFile.uri, result => {
                    connection.sendDiagnostics({ uri: sourceFile.uri, diagnostics: result });
                    _result = result;
                });
                errors += _result.filter(error => error.severity === vscode.DiagnosticSeverity.Error).length;
                warnings += _result.filter(error => error.severity === vscode.DiagnosticSeverity.Warning).length;
            }
        }
        progress.done();
        connection.window.showInformationMessage(`Verification complete. Found ${errors} errors and ${warnings} warnings.`);
    });
    connection.onRequest(shared.DetectDocumentNameCasesRequest.type, handler => {
        var _a;
        return (_a = projects.get(handler.uri)) === null || _a === void 0 ? void 0 : _a.service.__internal__.detectTagNameCase(handler.uri);
    });
}
exports.register = register;
//# sourceMappingURL=customFeatures.js.map