"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const shared = require("@volar/shared");
const vue = require("vscode-vue-languageservice");
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
const vscode = require("vscode-languageserver/node");
const configs_1 = require("./configs");
const projects_1 = require("./projects");
const tsConfigs = require("./tsConfigs");
const inferredCompilerOptions_1 = require("./inferredCompilerOptions");
const connection = vscode.createConnection(vscode.ProposedFeatures.all);
const documents = new vscode.TextDocuments(vscode_languageserver_textdocument_1.TextDocument);
let options;
let folders = [];
connection.onInitialize(onInitialize);
connection.onInitialized(onInitialized);
connection.onDidChangeConfiguration(() => {
    configs_1.updateConfigs(connection);
});
connection.listen();
documents.listen(connection);
function onInitialize(params) {
    var _a;
    options = params.initializationOptions;
    folders = params.workspaceFolders
        ? params.workspaceFolders
            .map(folder => folder.uri)
            .filter(uri => uri.startsWith('file:/'))
            .map(uri => shared.uriToFsPath(uri))
        : [];
    const result = {
        capabilities: {
            textDocumentSync: vscode.TextDocumentSyncKind.Incremental,
        }
    };
    if ((_a = options.languageFeatures) === null || _a === void 0 ? void 0 : _a.renameFileRefactoring) {
        result.capabilities.workspace = {
            fileOperations: {
                willRename: {
                    filters: [
                        { pattern: { glob: '**/*.vue' } },
                        { pattern: { glob: '**/*.js' } },
                        { pattern: { glob: '**/*.ts' } },
                        { pattern: { glob: '**/*.jsx' } },
                        { pattern: { glob: '**/*.tsx' } },
                        { pattern: { glob: '**/*.json' } },
                    ]
                }
            }
        };
    }
    return result;
}
async function onInitialized() {
    connection.onRequest(shared.PingRequest.type, () => 'pong');
    const ts = shared.loadTypescript(options.typescript.serverPath);
    if (options.languageFeatures) {
        const inferredCompilerOptions = await inferredCompilerOptions_1.getInferredCompilerOptions(ts, connection);
        const tsLocalized = options.typescript.localizedPath ? shared.loadTypescriptLocalized(options.typescript.localizedPath) : undefined;
        const projects = projects_1.createProjects(options, ts, tsLocalized, connection, documents, folders, inferredCompilerOptions);
        (await Promise.resolve().then(() => require('./features/customFeatures'))).register(connection, documents, projects);
        (await Promise.resolve().then(() => require('./features/languageFeatures'))).register(ts, connection, documents, projects, options.languageFeatures);
        (await Promise.resolve().then(() => require('./registers/registerlanguageFeatures'))).register(connection, options.languageFeatures, vue.getSemanticTokenLegend());
        connection.client.register(vscode.DidChangeConfigurationNotification.type, undefined);
        configs_1.updateConfigs(connection);
    }
    if (options.documentFeatures) {
        const formatters = await Promise.resolve().then(() => require('./formatters'));
        const noStateLs = vue.getDocumentLanguageService({ typescript: ts }, (document) => tsConfigs.getPreferences(connection, document), (document, options) => tsConfigs.getFormatOptions(connection, document, options), formatters.getFormatters(async (uri) => {
            var _a, _b, _c, _d, _e;
            if ((_b = (_a = options.documentFeatures) === null || _a === void 0 ? void 0 : _a.documentFormatting) === null || _b === void 0 ? void 0 : _b.getDocumentPrintWidthRequest) {
                const response = await connection.sendRequest(shared.GetDocumentPrintWidthRequest.type, { uri });
                if (response !== undefined) {
                    return response;
                }
            }
            return (_e = (_d = (_c = options.documentFeatures) === null || _c === void 0 ? void 0 : _c.documentFormatting) === null || _d === void 0 ? void 0 : _d.defaultPrintWidth) !== null && _e !== void 0 ? _e : 100;
        }));
        (await Promise.resolve().then(() => require('./features/documentFeatures'))).register(connection, documents, noStateLs);
        (await Promise.resolve().then(() => require('./registers/registerDocumentFeatures'))).register(connection, options.documentFeatures);
    }
}
//# sourceMappingURL=index.js.map