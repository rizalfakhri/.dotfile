"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEmmetConfiguration = exports.updateConfigs = void 0;
const vue = require("vscode-vue-languageservice");
let emmetConfig = {};
function updateConfigs(connection) {
    updateCodeLensConfig();
    updateEmmetConfig();
    async function updateCodeLensConfig() {
        const [codeLensReferences, codeLensPugTool, codeLensRefScriptSetupTool,] = await Promise.all([
            connection.workspace.getConfiguration('volar.codeLens.references'),
            connection.workspace.getConfiguration('volar.codeLens.pugTools'),
            connection.workspace.getConfiguration('volar.codeLens.scriptSetupTools'),
        ]);
        vue.codeLensOptions.references = codeLensReferences;
        vue.codeLensOptions.pugTool = codeLensPugTool;
        vue.codeLensOptions.scriptSetupTool = codeLensRefScriptSetupTool;
    }
    async function updateEmmetConfig() {
        var _a;
        emmetConfig = (_a = (await connection.workspace.getConfiguration('emmet'))) !== null && _a !== void 0 ? _a : {};
    }
}
exports.updateConfigs = updateConfigs;
function getEmmetConfiguration(syntax) {
    const syntaxProfiles = Object.assign({}, emmetConfig['syntaxProfiles'] || {});
    const preferences = Object.assign({}, emmetConfig['preferences'] || {});
    // jsx, xml and xsl syntaxes need to have self closing tags unless otherwise configured by user
    if (syntax === 'jsx' || syntax === 'xml' || syntax === 'xsl') {
        syntaxProfiles[syntax] = syntaxProfiles[syntax] || {};
        if (typeof syntaxProfiles[syntax] === 'object'
            && !syntaxProfiles[syntax].hasOwnProperty('self_closing_tag') // Old Emmet format
            && !syntaxProfiles[syntax].hasOwnProperty('selfClosingStyle') // Emmet 2.0 format
        ) {
            syntaxProfiles[syntax] = {
                ...syntaxProfiles[syntax],
                selfClosingStyle: 'xml'
            };
        }
    }
    return {
        preferences,
        showExpandedAbbreviation: emmetConfig['showExpandedAbbreviation'],
        showAbbreviationSuggestions: emmetConfig['showAbbreviationSuggestions'],
        syntaxProfiles,
        variables: emmetConfig['variables'],
        excludeLanguages: emmetConfig['excludeLanguages'],
        showSuggestionsAsSnippets: emmetConfig['showSuggestionsAsSnippets']
    };
}
exports.getEmmetConfiguration = getEmmetConfiguration;
//# sourceMappingURL=configs.js.map