"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInferredCompilerOptions = void 0;
async function getInferredCompilerOptions(ts, connection) {
    let [implicitProjectConfig_1, implicitProjectConfig_2] = (await connection.workspace.getConfiguration([
        { section: 'js/ts.implicitProjectConfig' },
        { section: 'javascript.implicitProjectConfig' },
    ]));
    implicitProjectConfig_1 = implicitProjectConfig_1 !== null && implicitProjectConfig_1 !== void 0 ? implicitProjectConfig_1 : {};
    implicitProjectConfig_2 = implicitProjectConfig_2 !== null && implicitProjectConfig_2 !== void 0 ? implicitProjectConfig_2 : {};
    const checkJs = readCheckJs();
    const experimentalDecorators = readExperimentalDecorators();
    const strictNullChecks = readImplicitStrictNullChecks();
    const strictFunctionTypes = readImplicitStrictFunctionTypes();
    const options = {
        ...inferredProjectCompilerOptions('typescript'),
        allowJs: true,
        allowSyntheticDefaultImports: true,
        allowNonTsExtensions: true,
        resolveJsonModule: true,
    };
    return options;
    function readCheckJs() {
        var _a, _b;
        return (_b = (_a = implicitProjectConfig_1['checkJs']) !== null && _a !== void 0 ? _a : implicitProjectConfig_2['checkJs']) !== null && _b !== void 0 ? _b : false;
    }
    function readExperimentalDecorators() {
        var _a, _b;
        return (_b = (_a = implicitProjectConfig_1['experimentalDecorators']) !== null && _a !== void 0 ? _a : implicitProjectConfig_2['experimentalDecorators']) !== null && _b !== void 0 ? _b : false;
    }
    function readImplicitStrictNullChecks() {
        var _a;
        return (_a = implicitProjectConfig_1['strictNullChecks']) !== null && _a !== void 0 ? _a : false;
    }
    function readImplicitStrictFunctionTypes() {
        var _a;
        return (_a = implicitProjectConfig_1['strictFunctionTypes']) !== null && _a !== void 0 ? _a : true;
    }
    function inferredProjectCompilerOptions(projectType) {
        const projectConfig = {
            module: ts.ModuleKind.CommonJS,
            target: ts.ScriptTarget.ES2020,
            jsx: ts.JsxEmit.Preserve,
        };
        if (checkJs) {
            projectConfig.checkJs = true;
            if (projectType === 'typescript') {
                projectConfig.allowJs = true;
            }
        }
        if (experimentalDecorators) {
            projectConfig.experimentalDecorators = true;
        }
        if (strictNullChecks) {
            projectConfig.strictNullChecks = true;
        }
        if (strictFunctionTypes) {
            projectConfig.strictFunctionTypes = true;
        }
        if (projectType === 'typescript') {
            projectConfig.sourceMap = true;
        }
        return projectConfig;
    }
}
exports.getInferredCompilerOptions = getInferredCompilerOptions;
//# sourceMappingURL=inferredCompilerOptions.js.map