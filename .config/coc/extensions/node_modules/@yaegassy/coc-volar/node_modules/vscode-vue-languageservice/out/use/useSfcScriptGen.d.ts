import type { IDescriptor } from '../types';
import { TextDocument } from 'vscode-languageserver-textdocument';
import { Ref } from '@vue/reactivity';
import { TsSourceMap, TeleportSourceMap } from '../utils/sourceMaps';
export declare function useSfcScriptGen(lsType: 'template' | 'script', ts: typeof import('typescript/lib/tsserverlibrary'), vueDoc: Ref<TextDocument>, script: Ref<IDescriptor['script']>, scriptSetup: Ref<IDescriptor['scriptSetup']>, scriptAst: Ref<ts.SourceFile | undefined>, scriptSetupAst: Ref<ts.SourceFile | undefined>, sfcTemplateCompileResult: ReturnType<(typeof import('./useSfcTemplateCompileResult'))['useSfcTemplateCompileResult']>, sfcStyles: ReturnType<(typeof import('./useSfcStyles'))['useSfcStyles']>['textDocuments']): {
    lang: import("@vue/reactivity").ComputedRef<string>;
    scriptSetupRanges: import("@vue/reactivity").ComputedRef<{
        bindings: import("../parsers/types").TextRange[];
        withDefaultsArg: import("../parsers/types").TextRange | undefined;
        propsRuntimeArg: import("../parsers/types").TextRange | undefined;
        propsTypeArg: import("../parsers/types").TextRange | undefined;
        emitsRuntimeArg: import("../parsers/types").TextRange | undefined;
        emitsTypeArg: import("../parsers/types").TextRange | undefined;
    } | undefined>;
    textDocument: import("@vue/reactivity").ComputedRef<TextDocument>;
    textDocumentTs: import("@vue/reactivity").ComputedRef<TextDocument | undefined>;
    sourceMap: import("@vue/reactivity").ComputedRef<TsSourceMap>;
    teleportSourceMap: import("@vue/reactivity").ComputedRef<TeleportSourceMap>;
};
