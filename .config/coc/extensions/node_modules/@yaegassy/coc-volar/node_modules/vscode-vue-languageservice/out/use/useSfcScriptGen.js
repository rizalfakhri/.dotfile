"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSfcScriptGen = void 0;
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
const shared = require("@volar/shared");
const reactivity_1 = require("@vue/reactivity");
const sourceMaps_1 = require("../utils/sourceMaps");
const scriptRanges_1 = require("../parsers/scriptRanges");
const scriptSetupRanges_1 = require("../parsers/scriptSetupRanges");
const script_1 = require("../generators/script");
const templateGen = require("../generators/template_scriptSetup");
function useSfcScriptGen(lsType, ts, vueDoc, script, scriptSetup, scriptAst, scriptSetupAst, sfcTemplateCompileResult, sfcStyles) {
    let version = 0;
    const uri = vueDoc.value.uri;
    const scriptRanges = reactivity_1.computed(() => scriptAst.value
        ? scriptRanges_1.parseScriptRanges(ts, scriptAst.value, !!scriptSetup.value)
        : undefined);
    const scriptSetupRanges = reactivity_1.computed(() => scriptSetupAst.value
        ? scriptSetupRanges_1.parseScriptSetupRanges(ts, scriptSetupAst.value)
        : undefined);
    const htmlGen = reactivity_1.computed(() => {
        var _a;
        if ((_a = sfcTemplateCompileResult.value) === null || _a === void 0 ? void 0 : _a.ast) {
            return templateGen.generate(sfcTemplateCompileResult.value.ast);
        }
    });
    const codeGen = reactivity_1.computed(() => script_1.generate(lsType, uri, script.value, scriptSetup.value, scriptRanges.value, scriptSetupRanges.value, () => htmlGen.value, () => sfcStyles.value));
    const lang = reactivity_1.computed(() => {
        return !script.value && !scriptSetup.value ? 'ts'
            : scriptSetup.value && scriptSetup.value.lang !== 'js' ? shared.getValidScriptSyntax(scriptSetup.value.lang)
                : script.value && script.value.lang !== 'js' ? shared.getValidScriptSyntax(script.value.lang)
                    : 'js';
    });
    const textDocument = reactivity_1.computed(() => {
        return vscode_languageserver_textdocument_1.TextDocument.create(lsType === 'template' ? `${uri}.__VLS_script.${lang.value}` : `${uri}.${lang.value}`, shared.syntaxToLanguageId(lang.value), version++, codeGen.value.getText());
    });
    const textDocumentTs = reactivity_1.computed(() => {
        if (lsType === 'template') {
            if (lang.value === 'js' || lang.value === 'jsx') {
                const tsLang = lang.value === 'jsx' ? 'tsx' : 'ts';
                return vscode_languageserver_textdocument_1.TextDocument.create(`${uri}.__VLS_script_ts.${tsLang}`, shared.syntaxToLanguageId(tsLang), textDocument.value.version, textDocument.value.getText());
            }
        }
    });
    const sourceMap = reactivity_1.computed(() => {
        var _a;
        const sourceMap = new sourceMaps_1.TsSourceMap(vueDoc.value, textDocument.value, lsType, false, {
            foldingRanges: false,
            formatting: false,
            documentSymbol: lsType === 'script',
            codeActions: !((_a = script.value) === null || _a === void 0 ? void 0 : _a.src) && lsType === 'script',
        }, codeGen.value.getMappings(parseMappingSourceRange));
        return sourceMap;
    });
    const teleportSourceMap = reactivity_1.computed(() => {
        const doc = textDocument.value;
        const sourceMap = new sourceMaps_1.TeleportSourceMap(doc, false);
        for (const teleport of codeGen.value.teleports) {
            sourceMap.add(teleport);
        }
        return sourceMap;
    });
    return {
        lang,
        scriptSetupRanges,
        textDocument,
        textDocumentTs,
        sourceMap,
        teleportSourceMap,
    };
    function parseMappingSourceRange(data, sourceRange) {
        var _a;
        if (data.vueTag === 'scriptSrc' && ((_a = script.value) === null || _a === void 0 ? void 0 : _a.src)) {
            const vueStart = vueDoc.value.getText().substring(0, script.value.loc.start).lastIndexOf(script.value.src);
            const vueEnd = vueStart + script.value.src.length;
            return {
                start: vueStart - 1,
                end: vueEnd + 1,
            };
        }
        else if (data.vueTag === 'script' && script.value) {
            return {
                start: script.value.loc.start + sourceRange.start,
                end: script.value.loc.start + sourceRange.end,
            };
        }
        else if (data.vueTag === 'scriptSetup' && scriptSetup.value) {
            return {
                start: scriptSetup.value.loc.start + sourceRange.start,
                end: scriptSetup.value.loc.start + sourceRange.end,
            };
        }
        else {
            return sourceRange;
        }
    }
}
exports.useSfcScriptGen = useSfcScriptGen;
//# sourceMappingURL=useSfcScriptGen.js.map