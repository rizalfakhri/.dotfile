"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDummyTsLs = void 0;
const shared = require("@volar/shared");
// Fast dummy TS language service, only has one script.
let dummyTsScriptVersion = 0;
let dummyTsScriptKind = 3;
let dummyTsScript;
let dummyTsLs;
function getDummyTsLs(ts, ts2, doc, getPreferences, getFormatOptions) {
    if (!dummyTsLs) {
        const host = {
            getPreferences,
            getFormatOptions,
            getCompilationSettings: () => ({}),
            getScriptFileNames: () => [shared.normalizeFileName(`dummy.${dummyTsScriptVersion}.ts`)],
            getScriptVersion: () => dummyTsScriptVersion.toString(),
            getScriptSnapshot: () => dummyTsScript,
            getScriptKind: () => dummyTsScriptKind,
            getCurrentDirectory: () => '',
            getDefaultLibFileName: () => '',
        };
        dummyTsLs = ts2.createLanguageService(ts, host, ts.createLanguageService(host));
    }
    dummyTsScriptVersion++;
    switch (doc.languageId) {
        case 'javascript':
            dummyTsScriptKind = ts.ScriptKind.JS;
            break;
        case 'typescript':
            dummyTsScriptKind = ts.ScriptKind.TS;
            break;
        case 'javascriptreact':
            dummyTsScriptKind = ts.ScriptKind.JSX;
            break;
        case 'typescriptreact':
            dummyTsScriptKind = ts.ScriptKind.TSX;
            break;
        default:
            dummyTsScriptKind = ts.ScriptKind.TS;
            break;
    }
    dummyTsScript = ts.ScriptSnapshot.fromString(doc.getText());
    return {
        ls: dummyTsLs,
        uri: shared.fsPathToUri(`dummy.${dummyTsScriptVersion}.ts`),
    };
}
exports.getDummyTsLs = getDummyTsLs;
//# sourceMappingURL=sharedLs.js.map